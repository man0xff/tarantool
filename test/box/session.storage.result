print('session.storage')
---
...
env = require('test_run')
---
...
test_run = env.new('localhost')
---
...
session = box.session
---
...
type(session.id())
---
- number
...
session.unknown_field
---
- null
...
type(session.storage)
---
- table
...
session.storage.abc = 'cde'
---
...
session.storage.abc
---
- cde
...
fiber = require('fiber')
---
...
function inc() conns = conns + 1 end
---
...
function dec() conns = conns - 1 end
---
...
type(session.on_connect(inc))
---
- function
...
type(session.on_disconnect(dec))
---
- function
...
conns = 0
---
...
all = getmetatable(session).aggregate_storage
---
...
all[session.id()].abc
---
- cde
...
test_run:cmd("create connection second to default")
---
- true
...
test_run:cmd("set connection second")
---
- true
...
while conns < 3 do fiber.sleep(0.01) end
---
...
conns
---
- 3
...
type(session.storage)
---
- table
...
type(session.storage.abc)
---
- nil
...
session.storage.abc = 'def'
---
...
session.storage.abc
---
- def
...
test_run:cmd("set connection default")
---
- true
...
session.storage.abc
---
- cde
...
test_run:cmd("set connection second")
---
- true
...
all[session.id()]
---
- abc: def
...
test_run:cmd("set connection default")
---
- true
...
all[session.id()]
---
- abc: cde
...
tres1 = {}
---
...
tres2 = {}
---
...
for k,v in pairs(all) do table.insert(tres1, v.abc) end
---
...
test_run:cmd("drop connection default")
---
- true
...
test_run:cmd("drop connection second")
---
- true
...
while conns > 1 do fiber.sleep(0.001) end
---
...
for k,v in pairs(all) do table.insert(tres2, v.abc) end
---
...
table.sort(tres1)
---
...
table.sort(tres2)
---
...
tres1
---
- - cde
  - def
...
tres2
---
- - cde
  - def
...
getmetatable(session).aggregate_storage = {}
---
...
session = nil
---
...
